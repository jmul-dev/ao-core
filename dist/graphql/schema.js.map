{"version":3,"sources":["../../src/graphql/schema.js"],"names":["db","schema","graphqlTools","makeExecutableSchema","typeDefs","SchemaDefinition","RootQuery","RootMutation","Types","resolvers","version","_version","videos","Video","all","peers","Peer","addMockFunctionsToSchema","mocks","preserveResolvers"],"mappings":"AAAA;;;;;;kBAee,UAAUA,EAAV,EAAc;AACzB,QAAMC,SAASC,2BAAaC,oBAAb,CAAkC;AAC7C;AACA;AACAC,kBAAU,CAACC,gBAAD,EAAmBC,eAAnB,EAA8BC,eAA9B,EAA4CC,eAA5C,CAHmC;AAI7CC,mBAAW;AACPH,uBAAW;AACPI,yBAAS;AAAA,2BAAMC,gBAAN;AAAA,iBADF;AAEPC,wBAAQ;AAAA,2BAAMZ,GAAGa,KAAH,CAASC,GAAT,EAAN;AAAA,iBAFD;AAGPC,uBAAO;AAAA,2BAAMf,GAAGgB,IAAH,CAAQF,GAAR,EAAN;AAAA;AAHA;AADJ;AAJkC,KAAlC,CAAf;AAYA;AACA;AACA;AACAZ,+BAAae,wBAAb,CAAsC,EAAEhB,cAAF,EAAUiB,YAAV,EAAiBC,mBAAmB,KAApC,EAAtC;AACA,WAAOlB,MAAP;AACH,C;;AAhCD;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA,IAAMI,wGAAN","file":"schema.js","sourcesContent":["'use strict';\nimport { graphqlTools } from 'graphql-tools';\nimport RootQuery from \"./queries/index\";\nimport RootMutation from \"./mutations/index\";\nimport Types from \"./types/index\";\nimport { version as _version } from \"../../package.json\";\n\n\nconst SchemaDefinition = `\n    schema {\n        query: RootQuery,\n        mutation: RootMutation,\n    }\n`\n\nexport default function (db) {\n    const schema = graphqlTools.makeExecutableSchema({\n        // TODO: type def's should probably mirror the Database models. Maybe we can \n        // more closely define these at some point\n        typeDefs: [SchemaDefinition, RootQuery, RootMutation, Types],\n        resolvers: {\n            RootQuery: {\n                version: () => _version,\n                videos: () => db.Video.all(),\n                peers: () => db.Peer.all()\n            },\n        }\n    });\n    // NOTE: set preserveResolvers to true if we only want to mock undefined resolvers,\n    // and use resolvers that are already defined.\n    // TODO: conditional on process.env.NODE_ENV\n    graphqlTools.addMockFunctionsToSchema({ schema, mocks, preserveResolvers: false });\n    return schema;\n}"]}