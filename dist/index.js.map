{"version":3,"sources":["../src/index.js"],"names":["CONSTANTS","debug","error","AO_CONSTANTS","Core","args","ipcServerId","options","db","server","subProcesses","message","process","send","event","EVENT_LOG","Log","create","ipc","on","sendEventLog","bind","DATA","data","type","DATA_TYPES","PEER_CONNECTED","Peer","findOrCreate","where","id","peerId","PEER_DISCONNECTED","destroy","Promise","resolve","reject","Database","init","then","catch","err","expressServer","graphqlSchema","use","schema","get","endpointURL","listen","httpPort","address","port","shutdownWithError","stop","close","dbConnecitonPromise","i","length","subprocess","kill","exit","p2pSubProcess","__dirname","stdio","code","push","IpcServer"],"mappings":"AAAA;;;;;;;;;AACA;;IAAYA,S;;AACZ;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;;;;;;;AACA,IAAMC,QAAQ,qBAAM,SAAN,CAAd;AACA,IAAMC,QAAQ,qBAAM,eAAN,CAAd;;AAGO,IAAMC,sCAAeH,SAArB;;IAEcI,I;;;AACjB,kBAAYC,IAAZ,EAAkB;AAAA;;AACdJ,cAAMI,IAAN;;AADc,gHAERA,KAAKC,WAFG;;AAGd,cAAKC,OAAL,GAAeF,IAAf;AACA,cAAKG,EAAL,GAAU,IAAV;AACA,cAAKC,MAAL,GAAc,IAAd;AACA,cAAKC,YAAL,GAAoB,EAApB;AANc;AAOjB;;;;qCACYC,O,EAAS;AAClB,gBAAKC,QAAQC,IAAb,EAAoB;AAChB;AACA;AACAD,wBAAQC,IAAR,CAAa,EAACC,OAAOX,aAAaY,SAArB,EAAgCJ,SAASA,OAAzC,EAAb;AACH,aAJD,MAIO;AACH;AACH;AACD,iBAAKH,EAAL,CAAQQ,GAAR,CAAYC,MAAZ,CAAmB,EAACN,SAASA,OAAV,EAAnB;AACH;;;yCACgB;AACb,iBAAKO,GAAL,CAAST,MAAT,CAAgBU,EAAhB,CAAmBhB,aAAaY,SAAhC,EAA2C,KAAKK,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAA3C;AACH;;;wDAC+B;AAAA;;AAC5B,kCAAS,KAAKb,EAAd,EAAkB,IAAlB,EAAwB,8DAAxB;AACA,iBAAKU,GAAL,CAAST,MAAT,CAAgBU,EAAhB,CAAmBhB,aAAamB,IAAhC,EAAsC,UAACC,IAAD,EAAU;AAC5C,wBAAOA,KAAKC,IAAZ;AACI,yBAAKrB,aAAasB,UAAb,CAAwBC,cAA7B;AACI,+BAAO,OAAKlB,EAAL,CAAQmB,IAAR,CAAaC,YAAb,CAA0B,EAACC,OAAO,EAACC,IAAIP,KAAKQ,MAAV,EAAR,EAA1B,CAAP;AACJ,yBAAK5B,aAAasB,UAAb,CAAwBO,iBAA7B;AACI,+BAAO,OAAKxB,EAAL,CAAQmB,IAAR,CAAaM,OAAb,CAAqB,EAACJ,OAAO,EAAEC,IAAIP,KAAKQ,MAAX,EAAR,EAArB,CAAP;AACJ;AACI,+BAAO,IAAP;AANR;AAQH,aATD;AAUH;;;kCACS;AAAA;;AACN,mBAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,uBAAK5B,EAAL,GAAU,IAAI6B,kBAAJ,EAAV;AACA,uBAAK7B,EAAL,CAAQ8B,IAAR,GAAeC,IAAf,CAAoB,YAAM;AACtBtC,0BAAM,2BAAN;AACA,2BAAKmB,YAAL,CAAkB,yBAAlB;AACAe;AACH,iBAJD,EAIGK,KAJH,CAIS,eAAO;AACZtC,0BAAM,kCAAN,EAA0CuC,GAA1C;AACAL,2BAAOK,GAAP;AACH,iBAPD;AAQH,aAVM,CAAP;AAYH;AACD;;;;;;oCAGY;AAAA;;AACR,kCAAS,KAAKvB,GAAd,EAAmB,IAAnB,EAAyB,6CAAzB;AACA,kCAAS,KAAKV,EAAd,EAAkB,IAAlB,EAAwB,qCAAxB;AACA,gBAAMkC,gBAAgB,wBAAtB;AACA,gBAAMC,gBAAgB,sBAAO,KAAKnC,EAAZ,CAAtB;AACAkC,0BAAcE,GAAd,CAAkB,UAAlB,EAA8B,uBAA9B,EAAsC,yCAAe,EAAEC,QAAQF,aAAV,EAAf,CAAtC;AACAD,0BAAcI,GAAd,CAAkB,WAAlB,EAA+B,0CAAgB,EAAEC,aAAa,UAAf,EAAhB,CAA/B,EANQ,CAMsE;AAC9E,iBAAKtC,MAAL,GAAciC,cAAcM,MAAd,CAAqB,KAAKzC,OAAL,CAAa0C,QAAlC,EAA4C,YAAM;AAC5DhD,sBAAM,qCAAqC,OAAKQ,MAAL,CAAYyC,OAAZ,GAAsBC,IAAjE;AACA,uBAAK/B,YAAL,CAAkB,0BAAlB;AACH,aAHa,CAAd;AAIA,iBAAKX,MAAL,CAAYU,EAAZ,CAAe,OAAf,EAAwB,KAAKiC,iBAAL,CAAuB/B,IAAvB,CAA4B,IAA5B,CAAxB;AACH;;;0CACiBoB,G,EAAK;AAAA;;AACnBvC,kBAAM,iCAAN,EAAyCuC,GAAzC;AACA,gBAAK,KAAKvB,GAAL,IAAY,KAAKA,GAAL,CAAST,MAA1B,EACI,KAAKS,GAAL,CAAST,MAAT,CAAgB4C,IAAhB;AACJ,gBAAK,KAAK5C,MAAL,KAAgB,IAAhB,IAAwB,KAAKA,MAAL,CAAY6C,KAAzC,EACI,KAAK7C,MAAL,CAAY6C,KAAZ;AACJ,gBAAMC,sBAAsB,KAAK/C,EAAL,KAAY,IAAZ,GAAmB0B,QAAQC,OAAR,EAAnB,GAAuC,KAAK3B,EAAL,CAAQ8C,KAAR,EAAnE;AACAC,gCAAoBhB,IAApB,CAAyB,YAAM;AAC3B,qBAAK,IAAIiB,IAAI,CAAb,EAAgBA,IAAI,OAAK9C,YAAL,CAAkB+C,MAAtC,EAA8CD,GAA9C,EAAmD;AAC/C,wBAAME,aAAa,OAAKhD,YAAL,CAAkB8C,CAAlB,CAAnB;AACAE,+BAAWC,IAAX;AACH;AACD/C,wBAAQgD,IAAR,CAAa,CAAb;AACH,aAND;AAOH;;;6CACoB;AACjB3D,kBAAM,mCAAN;AACA,gBAAM4D,gBAAgB,0BAAM,MAAN,EAAc,CAAC,gBAAKC,SAAL,EAAgB,IAAhB,EAAsB,cAAtB,CAAD,EAAwC,eAAxC,EAAyD,KAAKvD,OAAL,CAAaD,WAAtE,CAAd,EAAkG,EAACyD,OAAO,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CAAR,EAAlG,CAAtB;AACAF,0BAAc1C,EAAd,CAAiB,OAAjB,EAA0B,UAACsB,GAAD,EAAS;AAC/BvC,sBAAM,iCAAN,EAAyCuC,GAAzC;AACH,aAFD;AAGAoB,0BAAc1C,EAAd,CAAiB,OAAjB,EAA0B,UAAC6C,IAAD,EAAU;AAChC/D,sBAAM,wCAAN,EAAgD+D,IAAhD;AACH,aAFD;AAGA,iBAAKtD,YAAL,CAAkBuD,IAAlB,CAAuBJ,aAAvB;AACH;;;;EA1F6BK,mB;;kBAAb9D,I","file":"index.js","sourcesContent":["'use strict';\nimport * as CONSTANTS from './constants';\nimport { spawn } from \"child_process\";\nimport express from \"express\";\nimport { json } from \"body-parser\";\nimport { graphqlExpress, graphiqlExpress } from \"apollo-server-express\";\nimport graphql from \"graphql\";\nimport schema from \"./graphql/schema\";\nimport Database from \"./storage/database\";\nimport { notEqual } from \"assert\";\nimport { join } from \"path\";\nimport IpcServer from \"./interfaces/ipc-server\";\nimport Debug from 'debug';\nconst debug = Debug('ao:core')\nconst error = Debug('ao:core:error')\n\n\nexport const AO_CONSTANTS = CONSTANTS;\n\nexport default class Core extends IpcServer {\n    constructor(args) {\n        debug(args)\n        super(args.ipcServerId)\n        this.options = args\n        this.db = null\n        this.server = null\n        this.subProcesses = []\n    }\n    sendEventLog(message) {\n        if ( process.send ) {\n            // If there is a parent process (running within app) we relay\n            // all of the logs up.\n            process.send({event: AO_CONSTANTS.EVENT_LOG, message: message});\n        } else {\n            // TODO: append to a temp log somewhere (make this configurable via command line)\n        }\n        this.db.Log.create({message: message});\n    }\n    ipcLogListener() {\n        this.ipc.server.on(AO_CONSTANTS.EVENT_LOG, this.sendEventLog.bind(this));\n    }\n    ipcListenersThatPropogateToDb() {\n        notEqual(this.db, null, 'ipcListenersThatPropogateToDb called without db instantiated')\n        this.ipc.server.on(AO_CONSTANTS.DATA, (data) => {           \n            switch(data.type) {\n                case AO_CONSTANTS.DATA_TYPES.PEER_CONNECTED:\n                    return this.db.Peer.findOrCreate({where: {id: data.peerId}})\n                case AO_CONSTANTS.DATA_TYPES.PEER_DISCONNECTED:\n                    return this.db.Peer.destroy({where: { id: data.peerId }})\n                default:\n                    return null\n            }\n        });\n    }\n    dbSetup() {\n        return new Promise((resolve, reject) => {\n            this.db = new Database()\n            this.db.init().then(() => {\n                debug('database instance created')\n                this.sendEventLog('Core database connected');\n                resolve()\n            }).catch(err => {\n                error('error creating database instance', err)\n                reject(err)\n            })\n        })\n        \n    }\n    /**\n     * Note that the http server depends on both the ipc server AND the database\n     */\n    httpSetup() {\n        notEqual(this.ipc, null, 'http server requires instance of ipc server');\n        notEqual(this.db, null, 'http server requires instance of db');\n        const expressServer = express();\n        const graphqlSchema = schema(this.db);\n        expressServer.use('/graphql', json(), graphqlExpress({ schema: graphqlSchema }));\n        expressServer.get('/graphiql', graphiqlExpress({ endpointURL: '/graphql' })); // TODO: enable based on process.env.NODE_ENV\n        this.server = expressServer.listen(this.options.httpPort, () => {\n            debug('Express server running on port: ' + this.server.address().port);\n            this.sendEventLog('Core http server started');\n        });\n        this.server.on('error', this.shutdownWithError.bind(this));\n    }\n    shutdownWithError(err) {\n        error('core shutting down with error\\n', err);\n        if ( this.ipc && this.ipc.server )\n            this.ipc.server.stop();\n        if ( this.server !== null && this.server.close )\n            this.server.close();\n        const dbConnecitonPromise = this.db === null ? Promise.resolve() : this.db.close()\n        dbConnecitonPromise.then(() => {\n            for (let i = 0; i < this.subProcesses.length; i++) {\n                const subprocess = this.subProcesses[i];\n                subprocess.kill();\n            }\n            process.exit(1);\n        })\n    }\n    spinUpSubProcesses() {\n        debug('attempting to spawn sub processes')\n        const p2pSubProcess = spawn('node', [join(__dirname, '..', 'p2p/index.js'), '--ipcServerId', this.options.ipcServerId], {stdio: ['inherit', 'inherit', 'inherit']})\n        p2pSubProcess.on('error', (err) => {\n            error('p2pSubProcess failed to start: ', err)\n        })\n        p2pSubProcess.on('close', (code) => {\n            debug('p2pSubProcess closed on us with code: ', code)\n        })\n        this.subProcesses.push(p2pSubProcess)\n    }\n}"]}