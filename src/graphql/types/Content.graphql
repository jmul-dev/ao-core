enum ContentType {
    VOD
    PDF
    DAPP
}

enum ContentLicense {
    AO
    TAO
    CC
}

# Keep in sync with `src/models/AOContent.ts`
enum ContentState {
    DISCOVERED
    HOST_DISCOVERY
    HOST_DISCOVERY_FAILED
    DOWNLOADING
    DOWNLOADED
    PURCHASING
    PURCHASED
    DECRYPTION_KEY_RECEIVED
    VERIFIED
    VERIFICATION_FAILED
    ENCRYPTED
    DAT_INITIALIZED
    STAKING
    STAKED
    DISCOVERABLE
}

type DatStats {
    files: Int
    byteLength: Int
    length: Int
    version: Int
    downloadSpeed: Float
    uploadSpeed: Float
    downloadTotal: Float
    uploadTotal: Float
    peersTotal: Int
    peersComplete: Int
    complete: Boolean
    joinedNetwork: Boolean
}

type ContentTransactions {
    stakeTx: String
    purchaseTx: String
    hostTx: String
}

type VideoMetadata {
    encoding: String
    duration: Float
    width: Int
    height: Int
    aspectRatio: Float
    aspectRatioDisplay: String
    bitRate: Int
    frameRate: Float
}

type Signature {
    v: String!
    r: String!
    s: String!
}

type NetworkContentHostEntry {
    contentDatKey: String
    contentHostId: String
    timestamp: String
}

# Shared interface between all content types
# Keep AOContent.ts up to date with this
interface IContent {
    id: ID!
    contentHostId: ID
    state: ContentState!
    stakeId: ID
    nodeId: ID!
    creatorId: ID!
    taoId: ID
    contentType: ContentType!
    mimetype: String!
    contentLicense: ContentLicense!
    contentAttribution: String
    isFolder: Boolean!
    isMutable: Boolean!
    fileName: String
    fileDatKey: String
    fileDatStats: DatStats
    fileUrl: String
    fileChecksum: String
    baseChallenge: String
    baseChallengeSignature: Signature
    encChallenge: String
    metadataDatKey: ID!
    metadataDatStats: DatStats
    title: String
    description: String
    teaserUrl: String
    featuredImageUrl: String
    # Econ
    stake: Float
    fileSize: Float
    stakePrimordialPercentage: Float
    profitSplitPercentage: Float
    adSupport: Boolean
    # Network
    createdAt: String
    transactions: ContentTransactions
    purchaseId: String
    lastSeenContentHost: NetworkContentHostEntry
    totalHosts: Int
    recentlySeenHostsCount: Int
    isNetworkContent: Boolean
}

input ContentSubmissionInputs {
    ethAddress: String!
    content: Upload!
    contentType: ContentType!
    videoTeaser: Upload
    featuredImage: Upload!
    title: String!
    description: String!
    stake: Float!
    stakePrimordialPercentage: Float
    profitSplitPercentage: Float!
    contentLicense: ContentLicense!
    contentAttribution: String
    taoId: String
}

#
# ContentType === VOD
#
type VideoContent implements IContent {
    id: ID!
    contentHostId: ID
    state: ContentState!
    stakeId: ID
    nodeId: ID!
    creatorId: ID!
    taoId: ID
    contentType: ContentType!
    mimetype: String!
    contentLicense: ContentLicense!
    contentAttribution: String
    isFolder: Boolean!
    isMutable: Boolean!
    fileName: String
    fileDatKey: String
    fileDatStats: DatStats
    fileUrl: String
    fileChecksum: String
    baseChallenge: String
    baseChallengeSignature: Signature
    encChallenge: String
    metadataDatKey: ID!
    metadataDatStats: DatStats
    title: String
    description: String
    teaserUrl: String
    featuredImageUrl: String
    # Econ
    stake: Float
    fileSize: Float
    stakePrimordialPercentage: Float
    profitSplitPercentage: Float
    adSupport: Boolean
    # Network
    createdAt: String
    transactions: ContentTransactions
    purchaseId: String
    lastSeenContentHost: NetworkContentHostEntry
    totalHosts: Int
    recentlySeenHostsCount: Int
    isNetworkContent: Boolean
    # VideoContent
    metadata: VideoMetadata
}

#
# ContentType === DAPP
#
type DappContent implements IContent {
    id: ID!
    contentHostId: ID
    state: ContentState!
    stakeId: ID
    nodeId: ID!
    creatorId: ID!
    taoId: ID
    contentType: ContentType!
    mimetype: String!
    contentLicense: ContentLicense!
    contentAttribution: String
    isFolder: Boolean!
    isMutable: Boolean!
    fileName: String
    fileDatKey: String
    fileDatStats: DatStats
    fileUrl: String
    fileChecksum: String
    baseChallenge: String
    baseChallengeSignature: Signature
    encChallenge: String
    metadataDatKey: ID!
    metadataDatStats: DatStats
    title: String
    description: String
    teaserUrl: String
    featuredImageUrl: String
    # Econ
    stake: Float
    fileSize: Float
    stakePrimordialPercentage: Float
    profitSplitPercentage: Float
    adSupport: Boolean
    # Network
    createdAt: String
    transactions: ContentTransactions
    purchaseId: String
    lastSeenContentHost: NetworkContentHostEntry
    totalHosts: Int
    recentlySeenHostsCount: Int
    isNetworkContent: Boolean
    # DappContent
    unpacked: Boolean
    dappIndexPath: String
}

#
# ContentType === DAPP
#
type PdfContent implements IContent {
    id: ID!
    contentHostId: ID
    state: ContentState!
    stakeId: ID
    nodeId: ID!
    creatorId: ID!
    taoId: ID
    contentType: ContentType!
    mimetype: String!
    contentLicense: ContentLicense!
    contentAttribution: String
    isFolder: Boolean!
    isMutable: Boolean!
    fileName: String
    fileDatKey: String
    fileDatStats: DatStats
    fileUrl: String
    fileChecksum: String
    baseChallenge: String
    baseChallengeSignature: Signature
    encChallenge: String
    metadataDatKey: ID!
    metadataDatStats: DatStats
    title: String
    description: String
    teaserUrl: String
    featuredImageUrl: String
    # Econ
    stake: Float
    fileSize: Float
    stakePrimordialPercentage: Float
    profitSplitPercentage: Float
    adSupport: Boolean
    # Network
    createdAt: String
    transactions: ContentTransactions
    purchaseId: String
    lastSeenContentHost: NetworkContentHostEntry
    totalHosts: Int
    recentlySeenHostsCount: Int
    isNetworkContent: Boolean
    # PdfContent
}
