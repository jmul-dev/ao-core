enum ContentType {
    VOD
    STREAM
    FILE
    APP
}

# Keep in sync with `src/models/AOContent.ts`
enum ContentState {
    DISCOVERED
    HOST_DISCOVERY
    HOST_DISCOVERY_FAILED
    DOWNLOADING
    DOWNLOADED
    PURCHASING
    PURCHASED
    DECRYPTION_KEY_RECEIVED
    VERIFIED
    VERIFICATION_FAILED
    ENCRYPTED
    DAT_INITIALIZED
    STAKING
    STAKED
    DISCOVERABLE
}

type DatStats {
    files: Int
    byteLength: Int
    length: Int
    version: Int
    downloadSpeed: Float
    uploadSpeed: Float
    downloadTotal: Float
    uploadTotal: Float
    peersTotal: Int
    peersComplete: Int
    complete: Boolean
}

type ContentTransactions {
    stakeTx: String
    purchaseTx: String
    hostTx: String
}

type VideoMetadata {
    encoding: String
    duration: Float
    width: Int
    height: Int
    aspectRatio: Float
    aspectRatioDisplay: String
    bitRate: Int
    frameRate: Float
}

type Signature {
    v: String!
    r: String!
    s: String!
}

# Shared interface between all content types
# Keep AOContent.ts up to date with this
interface IContent {
    id: ID!
    contentHostId: ID
    state: ContentState!
    stakeId: ID
    nodeId: ID!
    creatorId: ID!
    contentType: ContentType!
    isFolder: Boolean!
    isMutable: Boolean!
    fileName: String
    fileDatKey: String
    fileUrl: String
    fileChecksum: String
    baseChallenge: String
    baseChallengeSignature: Signature
    encChallenge: String
    metadataDatKey: ID!
    metadataDatStats: DatStats
    title: String
    description: String    
    # Econ
    stake: Float
    fileSize: Float
    premium: Float
    split: Float
    adSupport: Boolean
    # Network
    createdAt: String
    transactions: ContentTransactions
    purchaseId: String
}

type VideoContent implements IContent {
    id: ID!
    contentHostId: ID
    state: ContentState!
    stakeId: ID
    nodeId: ID!
    creatorId: ID!
    contentType: ContentType!
    isFolder: Boolean!
    isMutable: Boolean!
    fileName: String
    fileDatKey: String
    fileUrl: String
    fileChecksum: String
    baseChallenge: String
    baseChallengeSignature: Signature
    encChallenge: String
    metadataDatKey: ID!
    metadataDatStats: DatStats
    title: String
    description: String
    # Econ
    stake: Float
    fileSize: Float
    premium: Float
    split: Float
    adSupport: Boolean
    # Network
    createdAt: String
    transactions: ContentTransactions
    purchaseId: String
    # VideoContent
    teaserUrl: String
    featuredImageUrl: String
    metadata: VideoMetadata
}

input VideoContentSubmissionInputs {
    ethAddress: String!
    video: Upload
    videoTeaser: Upload
    featuredImage: Upload
    title: String!
    description: String!
    stake: Float!
    profit: Float!
}